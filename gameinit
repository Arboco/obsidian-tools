#! /usr/bin/env fish

#argv[1] is obsidian md file title

function help_function
    echo -e "Usage: gameinit [OPTION] \"title of md file with launch property\""
    echo "Options:"
    echo "  -i       History"
    echo "  -d       Debug Mode"
    echo "  -j       Activates jap-trans local server"
end

argparse --name=gameinit i/history d/debug j/japan h/help 'n/name=' -- $argv
or return

if set -q _flag_h
    help_function
    exit
end

set script_dir (realpath (status dirname))
set obsidian (ot_config_grab "ObsidianMainFolder")
set notes (ot_config_grab "NotesFolder")
set obsidian_resource $obsidian/(ot_config_grab "ObsidianResourceFolder")
set session_limit (ot_config_grab "SessionLimit")
set startup_compensator (ot_config_grab "StartupCompensator")
set timeline_option (ot_config_grab "TimelineOption")
set start (date +%s)

if set -q _flag_i
    set selection_last_played (rg -oP "(?<=last_played: ).*" $obsidian/$notes)
    for i in $selection_last_played
        set mdsplit (echo $i | string split ":")[1]
        if rg -q '^launch:' $mdsplit
            set game_title (echo $i | rg -o -r '$1' '.*/([^/]+)\.md:' )
            set game_last_played (echo $i | string split ".md:")[2]
            set final_string "$game_last_played | $game_title"
            set final_list $final_list $final_string
        end
    end
    set final_sorted_list (printf "%s\n" $final_list | sort -r)
    for i in $final_sorted_list
        set cleaned_final_sorted_list $cleaned_final_sorted_list (echo $i | string split "| ")[2].md
    end

    set selection (for i in $cleaned_final_sorted_list; echo $i; end | fzf --style=full --preview "$script_dir/scripts/media-fzf.fish {}")
    set selection_md (fd -t f -g $selection $obsidian/$notes)
    if rg "^profile:" $selection_md
        set profile (rg -oP '(?<=profile: ).*' $selection_md)
    else
        echo "Select Profile:"
        set profile (gum choose --limit 1 "x" "v" "w")
        sed -i "/^launch:/a\\profile: $profile" $selection_md
    end
else
    set selection_md (rg -l "^launch:" $obsidian/$notes | fzf --delimiter='/' --with-nth=-1 --style=full --preview "$script_dir/scripts/media-fzf.fish {}")
    if rg "^profile:" $selection_md
        set profile (rg -oP '(?<=profile: ).*' $selection_md)
    else
        echo "Select Profile:"
        set profile (gum choose --limit 1 "x" "v" "w")
        sed -i "/^launch:/a\\profile: $profile" $selection_md
    end
end

set base_name (basename -s ".md" $selection_md)
set launch (cat $selection_md | grep 'launch:')
set launch (echo $launch | grep -oP '(?<=launch: ).*')
set info_start_playtime (grep -oP "(?<=playtime: ).*" $selection_md)

if grep 'hook-values: [0-9]* [0-9]*' $selection_md
    set hook_values (grep 'hook-values: [0-9]* [0-9]*' $selection_md | grep -o '[0-9]*')
else
    set hook_values 0 0
end
if test $hook_values[2] -gt 0
    set startup_compensator $hook_values[2]
end

mkdir -p $obsidian_resource/(ot_config_grab "GameFolder")
mkdir -p $obsidian_resource/(ot_config_grab "AnimeFolder")
mkdir -p $obsidian_resource/(ot_config_grab "MindPalaceFolder")

# turning screen saver and display manager off so they never bother you during gameplay 
xset s off
xset -dpms

if string match v $profile
    set profile_name (ot_config_grab "Profile1DeviceName")
    $script_dir/scripts/record_input.fish $base_name 1 &
    $script_dir/scripts/input_idle_watcher.fish 1 (ot_config_grab "Profile1ControllerCheck") $hook_values[1] &
    echo "Starting Profile 1 $profile_name"
    set his_flag v
end

if string match x $profile
    set profile_name (ot_config_grab "Profile2DeviceName")
    $script_dir/scripts/record_input.fish $base_name 2 &
    $script_dir/scripts/input_idle_watcher.fish 2 (ot_config_grab "Profile2ControllerCheck") $hook_values[1] &
    echo "Starting Profile 2 $profile_name"
    set his_flag x
end

if string match w $profile
    set profile_name (ot_config_grab "Profile3DeviceName")
    $script_dir/scripts/record_input.fish $base_name 3 &
    $script_dir/scripts/input_idle_watcher.fish 3 (ot_config_grab "Profile3ControllerCheck") $hook_values[1] &
    echo "Starting Profile 3 $profile_name"
    set his_flag w
end

if set -q _flag_j
    source ~/python/jap-trans/bin/activate.fish
    python3 $script_dir/python/jap-trans-server.py &
end

set debug 0
if set -q _flag_d
    set debug 1
end

if grep "playtime:" $selection_md >/dev/null 2>&1
else
    sed -i "/^launch:/a\\playtime: 0" $selection_md
end

echo $selection_md >/tmp/obsidian_last.txt

# launching the game, every command after this will only trigger once the game closes
set -x WINEDEBUG -all
begin
    eval $launch
end >/dev/null 2>&1

set inbetween (date +%s)
set failsafe (math $inbetween - $start)
if test $failsafe -lt 10
    set window_id (xdotool getwindowfocus)
    set pid_active (xprop -id $window_id _NET_WM_PID | awk '{print $3}')
    set p_name (ps -p $pid_active -o comm=)
    while kill -0 (pidof $pid_active) 2>/dev/null
        echo "Something went wrong but failsafe for process $p_name is active"
        sleep 2
    end
end

while not test -f /tmp/idle_counter.txt
    sleep 1
end

set second_reduction (cat /tmp/idle_counter.txt)

if grep obsidian-tools $selection_md >/dev/null 2>&1
else
    sed -i '/^tags:/a\  - obsidian-tools' $selection_md
end

xset s on
xset +dpms

if grep "# Info" $selection_md >/dev/null 2>&1
else
    echo "# Info" >>$selection_md
    echo "## Timeline" >>$selection_md
    echo "" >>$selection_md
    echo "#" >>$selection_md
end

set end (date +%s)
set calculation_seconds (math $end - $start)
set result (math "($end - $start - $second_reduction) / 60")
set result_minutes (math round $result)
set result_seconds (math $end - $start - $second_reduction)
if test $result_seconds -gt $startup_compensator
    set result_seconds (math $result_seconds - $startup_compensator)
else
    set result_seconds 0
end
set info_time_calculation_info (echo "SecondsPlayed IdleSeconds StartupCompensator")
set info_time_calculation_raw (echo "$calculation_seconds - $second_reduction - $startup_compensator = $result_seconds")
set info_time_added (echo "$result_seconds seconds get added to playtime")

set cur_date (date +%d.%m.%y)
set cur_hour (date +%H:%M)

if test $timeline_option -eq 1
    if grep "Played:.* $cur_date" $selection_md
        set info_session_time (echo "Existing session is getting increased by $result_minutes minutes.")
        set ex_minutes (grep "$cur_date" $selection_md | grep -oP '(?<=Played: )..?.?')
        cp $selection_md /tmp/clone.md
        awk -v ex="$result_minutes" -v date="$cur_date" '$0 ~ date {
      for (i = 1; i <= NF; i++) { 
        if ($i ~ /^[0-9]+$/) $i = $i + ex;} 
        }
        { print }' /tmp/clone.md >$selection_md
    else if test $result_minutes -ge $session_limit
        set info_session_time (echo "The session limit of $session_limit was hit.")
        set info_session_why (echo "New date with $result_minutes is inserted into timelinie.")

        sed "/^## Timeline/{:a; n; /^#/!ba; i\\
\\
>[!info] Played: $result_minutes minutes - $cur_date
}" $selection_md >/tmp/clone2.md
        mv /tmp/clone2.md $selection_md

        #echo -e "\n >[!info] Played: $result Minutes - $cur_date\n" >>$selection_md
    else
        set info_session_time (echo "The session limit of $session_limit minutes was not hit.")
        set info_session_why (echo "Only $result_minutes minutes accumulated.")
    end
else
    set info_session_time (echo "Timeline feature is deactivated.")
end

if test $debug -eq 1
    set info_final_playtime (grep -oP "(?<=playtime: ).*" $selection_md)
else
    cp $selection_md /tmp/clone.md
    awk -v var="$result_seconds" '/playtime:/ { 
  for (i = 1; i <= NF; i++) { 
        if ($i ~ /^[0-9]+$/) $i = $i + var; 
    } 
    } { print }' /tmp/clone.md >$selection_md

    set info_final_playtime (grep -oP "(?<=playtime: ).*" $selection_md)
end

set cur_date (date +"%Y-%m-%dT%H:%M:%S")
if rg "^last_played:" $selection_md
    sed -i '/last_played:/d' $selection_md
end
sed -i "/^playtime:/a\\last_played: $cur_date" $selection_md

# Makes sure the screenshot script gets killed since it runs as a background process  
kill $(jobs -p)

if test -f /tmp/clone.md
    rm /tmp/clone.md
end

if test -f /tmp/idle_counter.txt
    rm /tmp/idle_counter.txt
end

echo -e '\a'

gum style \
    --foreground 212 --border-foreground 212 --border double \
    --align center --width 70 --margin "1 2" --padding "2 4" \
    "$info_session_time" "$info_session_why"

gum style \
    --foreground 190 --border-foreground 190 --border double \
    --align center --width 70 --margin "1 2" --padding "2 4" \
    "$info_time_calculation_info" "$info_time_calculation_raw" "$info_time_added"

if test $debug -eq 1
    echo "Debug Mode is activated. Accumulated playtime will be ignored."
end

gum style \
    --foreground 79 --border-foreground 79 --border double \
    --align center --width 70 --margin "1 2" --padding "2 4" \
    "Playtime updated from $info_start_playtime to $info_final_playtime seconds."

if set -q _flag_j
    kill (pgrep -f jap-trans-server.py)
end
