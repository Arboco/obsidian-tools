#! /usr/bin/env fish

#argv[1] is obsidian md file title
function help_function
    echo -e "Usage: gameinit [OPTION] \"title of md file with launch property\""
    echo "Options:"
    echo "  -v       Activates media collector on keyboard, specifically for Visual Novels"
    echo "  -x       Activates media collector for Xbox Controller"
end

argparse --name=gameinit v/visualnovel x/xbox h/help 'n/name=' -- $argv
or return

set script_dir (realpath (status dirname))
# turning screen saver and display manager off so they never bother you during gameplay 
xset s off
xset -dpms

if set -q _flag_h
    help_function
    exit
end

if set -q _flag_v
    $script_dir/scripts/vn-suit.fish $argv[1] &
    echo "continuing..."
    $script_dir/scripts/vn_idle_watcher.fish &
end

if set -q _flag_x
    $script_dir/scripts/xbox-suit.fish $argv[1] &
    echo "continuing..."
    $script_dir/scripts/xbox_idle_watcher.fish &
end

set obsidian /home/anon/ortup/important/notes/ortvault
set start (date +%s)
set a_path (find $obsidian -type f -name "$argv[1].md" -not -path '*/[@.]*' )
set launch (cat $a_path | grep 'launch:')
set launch (echo $launch | grep -oP '(?<=launch: ).*')

if grep "playtime:" $a_path
else
    sed -i "/^launch:/a\\playtime: 0" $a_path
end

echo $a_path >/tmp/obsidian-game.txt

# launching the game, every command after this will only trigger once the game closes
eval $launch; or true
sleep 2

set check_runtime (math (date +%s) - $start)
if test $check_runtime -lt 10
    while kill -0 (pidof $argv[2]) 2>/dev/null
        echo "Working..."
        sleep 2
    end
end

if test -f /tmp/idle_counter.txt
    and grep "[0-9]" /tmp/idle_counter.txt
    set second_reduction (cat /tmp/idle_counter.txt)
else
    set second_reduction 0
end

if grep obsidian-tools $a_path
else
    sed -i '/^tags:/a\  - obsidian-tools' $a_path
end

xset s on
xset +dpms
set end (date +%s)
echo "Time Calculation: "(math $end - $start) " - $second_reduction"
set result (math "($end - $start - $second_reduction) / 60")
set result_minutes (math round $result)
set result_seconds (math $end - $start - $second_reduction)

set cur_date (date +%d.%m.%y)
set cur_hour (date +%H:%M)

if grep "$cur_date" $a_path
    echo "date is available"
    set ex_minutes (grep "$cur_date" $a_path | grep -oP '(?<=Played: )..?.?')
    cp $a_path /tmp/clone.md
    awk -v ex="$result_minutes" -v date="$cur_date" '$0 ~ date {
      for (i = 1; i <= NF; i++) { 
        if ($i ~ /^[0-9]+$/) $i = $i + ex;} 
        }
        { print }' /tmp/clone.md >$a_path
else
    echo "date is not available"
    sed "/^## Times/{:a; n; /^#/!ba; i\
\\
>[!info] Played: $result_minutes Minutes - $cur_date
}" $a_path >/tmp/clone2.md
    mv /tmp/clone2.md $a_path

    #echo -e "\n>[!info] Played: $result Minutes - $cur_date\n" >>$a_path
end

cp $a_path /tmp/clone.md
awk -v var="$result_seconds" '/playtime/ { 
  for (i = 1; i <= NF; i++) { 
        if ($i ~ /^[0-9]+$/) $i = $i + var; 
    } 
    } { print }' /tmp/clone.md >$a_path

# Makes sure the screenshot script gets killed since it runs as a background process  
kill $(jobs -p)

rm /tmp/clone.md
rm /tmp/idle_counter.txt

echo -e '\a'
