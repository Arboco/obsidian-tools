#! /usr/bin/env fish

set script_dir (realpath (status dirname))
if test -e ~/.config/ortscripts/series-dataview-insert
else
    cp "$script_dir/conifg-examples/series-dataview-insert" ~/.config/ortscripts/
end

function help_function
    echo "You can give a number as argument which opens that episode directly"
    echo "Options:"
    echo "  -i       History"
    echo "  -m       Memento player"
end

argparse --name=gameinit i/history h/help m/memento 'n/name=' -- $argv
or return

if set -q _flag_h
    help_function
    exit
end

if set -q _flag_i
    set history_selection (tac ~/.config/ortscripts/series-history | fzf --delimiter='/' --with-nth=-1 --style=full --preview "$script_dir/scripts/media-fzf.fish {}")
    if echo $history_selection | rg "#Memento"
        set _flag_m 1
    end
    set obsidian_md (echo $history_selection | string split "|" | string trim -r)[1]
end

set player mpv
if set -q _flag_m
    set player memento
end

set obsidian (ot_config_grab "ObsidianMainFolder")
set notes (ot_config_grab "NotesFolder")
set series_folder tvseries
set resources_folder (ot_config_grab "ObsidianResourceFolder")
if not set -q _flag_i
    set obsidian_md (rg -l "seriespath:" $obsidian | sort -r | fzf --delimiter='/' --with-nth=-1 --style=full --preview "$script_dir/scripts/media-fzf.fish {}")
end
set raw_file_name (basename -s ".md" $obsidian_md)

# Obtaining md and setting up folders and sub md 
set a_path (cat $obsidian_md | grep 'seriespath:')
set a_path (echo $a_path | grep -oP '(?<=seriespath: ).*$')
set folder_title (echo $raw_file_name | tr '[:upper:]' '[:lower:]' | sed 's/ /-/g')
if rg -q 'watched: [0-9]' $obsidian_md
    set grepd_episode (cat $obsidian_md | grep -oP '(?<=watched: )[0-9][0-9]?[0-9]?')
else
    set grepd_episode 0
    sed -i "s/watched:/watched: 0/g" $obsidian_md
end
set current_episode (math $grepd_episode + 1)
if not test -z $argv[1]
    set current_episode $argv[1]
end

set episodes_total (cat $obsidian_md | grep -oP '(?<=episodes: )[0-9][0-9]?[0-9]?')
if test $current_episode -gt $episodes_total
    gum style \
        --foreground 212 --border-foreground 212 --border double \
        --align center --width 70 --margin "1 2" --padding "2 4" \
        "You already completed this series..."
    ffplay -nodisp -autoexit $script_dir/helper/cold-chill-emote-animal-crossing.mp3 >/dev/null 2>&1
    exit
end

set screenshot_folder $obsidian/$resources_folder/$series_folder/media/screenshots/$folder_title

mkdir -p $screenshot_folder
mkdir -p $obsidian/$notes/tv_db/obsidian-tools/series/$folder_title/

set current_season (cat $obsidian_md | grep -oP '(?<=c_seasons: )[0-9][0-9]?[0-9]?')
if not set -q _flag_i
    if test -z $current_season; and not rg "linear: true" $obsidian_md; and not rg "^seasons: 1" $obsidian_md
        echo "Which season is this episode from?"
        read current_season
    end
end

set episode_md "$raw_file_name Season - $current_season Episode - $current_episode.md"
set episode_md_final "$obsidian/$notes/tv_db/obsidian-tools/series/$folder_title/$episode_md"
echo "$episode_md_final" >/tmp/obsidian_last.txt

if rg "anachronic: true" $obsidian_md
    if set -q _flag_i
        set episode_to_play (echo "$history_selection" | rg -oP "(?<=FilePath:).*")
        set current_episode (echo "$history_selection" | rg -oP "(?<=Episode )[0-9][0-9]?[0-9]?")
        set episode_md "$raw_file_name Episode - $current_episode.md"
        set episode_md_final "$obsidian/$notes/tv_db/obsidian-tools/series/$folder_title/$episode_md"
    else
        set episode_to_play (find $a_path/* -regextype posix-extended -regex ".*(mp4|mkv|mov|avi|webm|flv|wmv|m4v)" | fzf --delimiter='/' --with-nth=-1)
        echo "Episode number?"
        read current_episode
        set episode_md "$raw_file_name Episode - $current_episode.md"
        set episode_md_final "$obsidian/$notes/tv_db/obsidian-tools/series/$folder_title/$episode_md"
    end
else
    set episode_array (find $a_path/ -maxdepth 1 -regextype posix-extended -regex ".*(mp4|mkv|mov|avi|webm|flv|wmv|m4v)" | sort)
    set episode_to_play "$episode_array[$current_episode]"
end

if rg "linear: true" $obsidian_md; or rg "^seasons: 1" $obsidian_md
    set episode_md "$raw_file_name Episode - $current_episode.md"
    set episode_md_final "$obsidian/$notes/tv_db/obsidian-tools/series/$folder_title/$episode_md"
end

# Preparing video file and video data 
set thumbnail_picture "$folder_title-thumb-$current_episode.jpg"
set seconds_series (ffprobe -v error -show_entries format=duration -of default=noprint_wrappers=1:nokey=1 $episode_to_play)
ffmpeg -y -ss 00:03:00 -i "$episode_to_play" -frames:v 1 -update 1 -q:v 2 "$screenshot_folder/$thumbnail_picture"

$script_dir/scripts/inotify-anime-clip.fish "$obsidian_md" "$episode_md_final" "$raw_file_name" tv &
$script_dir/scripts/inotify-anime-screenshot.fish "$episode_md_final" "$raw_file_name" tv &

if rg -q "^origin:" $episode_md_final
else
    # insert into current episode md 
    echo --- >>$episode_md_final
    echo "origin: \"[[$raw_file_name]]\"" \
        \n"season: $current_season" \
        \n"episode: $current_episode" \
        \n"cover-img: \"[[$thumbnail_picture]]\"" \
        \n"tags:" \
        \n"  - tvseries" \
        \n"  - db" \
        \n"  - episode" \
        \n"---" >>$episode_md_final
end

if rg "linear: true" $obsidian_md; or rg "^seasons: 1" $obsidian_md
    sed -i "/season:/d" "$episode_md_final"
end

set parent_md $obsidian_md

set dataviewcheck false
if grep -q "```dataview" $parent_md; or grep -q "```base" $parent_md
    set dataviewcheck true
end

if string match false $dataviewcheck; and test -f $HOME/.config/ortscripts/series-dataview-insert
    sed -i "/^tags:/i\\cssclasses:" "$parent_md"
    sed -i "/^cssclasses:/a\\  - cards" "$parent_md"
    sed -i "/^cssclasses:/a\\  - table-max" "$parent_md"
    set input_file $parent_md
    set insert_file $HOME/.config/ortscripts/series-dataview-insert

    set last_delim_line (grep -n '^---$' $input_file | cut -d: -f1 | tail -n 1)
    set after_line (math $last_delim_line + 1)

    head -n $last_delim_line $input_file >/tmp/temp_before.txt
    tail -n +$after_line $input_file >/tmp/temp_after.txt
    cat /tmp/temp_before.txt $insert_file /tmp/temp_after.txt >/tmp/temp_combined.txt

    mv /tmp/temp_combined.txt $input_file
end

if rg "seconds-watched:" $episode_md_final
    set start_point (rg "seconds-watched:" $episode_md_final | rg -o "[0-9]+")
else
    set start_point 0
end

$player --start=$start_point --screenshot-directory="$screenshot_folder" --screenshot-jpeg-quality=75 --input-ipc-server=/tmp/mpvsocket $episode_to_play &
set video_pid $last_pid
while kill -0 $last_pid
    if echo '{ "command": ["get_property", "playback-time"] }' | socat - /tmp/mpvsocket | rg -o "[0-9]+.[0-9]+"
        set watched_seconds (echo '{ "command": ["get_property", "playback-time"] }' | socat - /tmp/mpvsocket | rg -o "[0-9]+.[0-9]+")
        set calculated_percentage (math $watched_seconds / $seconds_series x 100)
        echo (echo "$calculated_percentage" | string split "." )[1]%
    end
    sleep 1
end
rm /tmp/mpvsocket
# inotify is very persistent so it needs to be explicitly killed
# this is a watcher that continously looks up if video player still runs and it not it kills the innotify watchers 
$script_dir/scripts/inotify-killer.fish $last_pid &

set calculated_percentage (math $watched_seconds / $seconds_series x 100)
set percentage_int (echo "$calculated_percentage" | string split "." )[1]
set save_time (echo "$watched_seconds" | string split ".")[1]
set seconds_rounded (echo "$seconds_series" | string split ".")[1]
set min_percentage 85

gum style \
    --foreground 212 --border-foreground 212 --border double \
    --align center --width 70 --margin "1 2" --padding "2 4" \
    "Watched $save_time / $seconds_rounded seconds" \
    "That's $percentage_int% - Required are $min_percentage%"

if test $percentage_int -ge $min_percentage
    set episode_completed 1
    set result_test "Reached Target - Video Completed"
    sed -i "/seconds-watched:/d" $episode_md_final
else
    set episode_completed 0
    set result_test "Only $percentage_int% - Saving for Next Time"
    sed -i "/seconds-watched:/d" $episode_md_final
    sed -i "/^tags:/i\\seconds-watched: $save_time" "$episode_md_final"
end

set cur_date (date +"%Y-%m-%dT%H:%M:%S")
set short_date (date +"%Y-%m-%d")

if test $episode_completed -eq 1

    if not test -z $argv[1]
    else
        cp $obsidian_md /tmp/clone.md
        awk '/watched:/ { 
                            for (i = 1; i <= NF; i++) { 
                                if ($i ~ /^[0-9]+$/) $i = $i + 1; 
                            } 
                        } { print }' /tmp/clone.md >$obsidian_md
        rm /tmp/clone.md
    end

    sed -i "/^origin:/a\\finished-date: $cur_date" "$episode_md_final"

    if rg -q "status: Completed" $episode_md_final
    else
        if test $current_episode -eq $episodes_total
            sed -i "/status:/d" $parent_md
            sed -i "/^score:/a\\status: Completed" "$parent_md"
            gum style \
                --foreground 77 --border-foreground 77 --border double \
                --align center --width 70 --margin "1 2" --padding "2 4" \
                "Completed Series with this Episode!"
            ffplay -nodisp -autoexit $script_dir/helper/delight-emote-animal-crossing.mp3 >/dev/null 2>&1
            sed -i "/$raw_file_name/d" ~/.config/ortscripts/series-history
            for i in $obsidian/$notes/anime_db/obsidian-tools/anime/$folder_title/*
                set eps_obs_name (basename -s ".md" $i)
                echo "[[$eps_obs_name]]" >>$parent_md
                sed -e '1,/^---$/d' -e '/^---$/q' $i >>$parent_md
            end
            exit
        end
    end
end

gum style \
    --foreground 79 --border-foreground 79 --border double \
    --align center --width 70 --margin "1 2" --padding "2 4" \
    "$result_test" "$rewatch_text"

if test $episode_completed -eq 1
    set completed_text ">>> Advance to next Episode >>>"
end

if set -q _flag_m
    set completed_text "$completed_text #Memento"
end

if rg "anachronic: true" $parent_md
    set completed_text "$completed_text #Anachronic FilePath:$episode_to_play"
end

set season_info "Season $current_season"
if rg "linear: true" $obsidian_md; or rg "^seasons: 1" $obsidian_md
    set -e season_info
end

if rg -q "$obsidian_md" ~/.config/ortscripts/series-history
    sed -i "/$raw_file_name/d" ~/.config/ortscripts/series-history
    echo "$obsidian_md | $season_info Episode $current_episode ($short_date) --- $percentage_int% $completed_text" >>~/.config/ortscripts/series-history
else
    echo "$obsidian_md | $season_info Episode $current_episode ($short_date) --- $percentage_int% $completed_text" >>~/.config/ortscripts/series-history
end

rm /tmp/obsidian_last.txt
