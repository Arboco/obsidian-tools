#! /usr/bin/env fish

function help_function
    echo "Options:"
    echo "  default  Card pool comes from current the-pool target or if not available generic selection"
    echo "  -o       override file used for default option so you can skip using the-pool directly"
    echo "  -p       Include card pool from the parent of the-pool target"
    echo "  -c       Include card pool from siblings (other children of your parent), combinable with -p"
    echo "  -e       Include card pool from every file you link to from the-pool target, combinable with -c and -p"
    echo "  -r       Searches links recursively (link inside link inside link...) and adds all it finds to card pool"
    echo "           Default is a depth of 3 but depth can be customized with second argument"
    echo "  -t       Include card pool from a particular tag from pool files"
    echo "  -d       The card pool from two combined tags from pool files"
    echo "  -g       Use group property to put all files from a group into card pool"
    echo "  -k       Search trough files with keyword"
    echo ""
    echo "Filters: Apply these in combination with the above to get the exact card-pool you want"
    echo "  -s       Filter your pool based on subtags inside your card headers"
    echo "  -f       Filter based on filename"
end

function icat_half
    set image $argv[1]

    if not test -f "$image"
        echo "Error: File not found: $image"
        return 1
    end

    set rows (tput lines)
    set row_height_px 18
    set max_height (math "$rows * $row_height_px / 2")

    set tmpimg (mktemp --suffix=.$argv[2])
    magick "$image" -resize x$max_height\> "$tmpimg"

    kitty +kitten icat "$tmpimg"
    sleep 0.3
    rm $tmpimg
end

argparse --name=pool t/tag d/double s/subtag c/child e/every p/parent r/recursive o/override g/group k/keyword m/mini f/filter h/help 'n/name=' -- $argv
or return

set script_dir (realpath (status dirname))
set obsidian_folder (ot_config_grab "ObsidianMainFolder")
set obsidian_resource (ot_config_grab "ObsidianResourceFolder")
set notes (ot_config_grab "NotesFolder")
set default_pool_array (rg -l "^(I|Q|W|D):" $obsidian_folder/$notes)

if test -f /tmp/obsidian_last.txt
    set obsidian_file (cat /tmp/obsidian_last.txt)
    set filtered_pool $obsidian_file
end

if set -q _flag_h
    help_function
    exit
end

if set -q _flag_o
    set filtered_pool (rg -l "^(I|Q|W|D):" $obsidian_folder/$notes | fzf -0 --preview 'glow {}')
end

if set -q _flag_p
    set parent_name (rg -oP "(?<=parent: \"\[\[)[^\]]*" $obsidian_file)
    set parent_file (find $obsidian_folder/$notes/* -type f -iname "$parent_name.md")
    set filtered_pool $filtered_pool $parent_file
end

if set -q _flag_c
    set parent_name (rg -oP "(?<=parent: \"\[\[)[^\]]*" $obsidian_file)
    set parent_file (find $obsidian_folder/$notes/* -type f -iname "$parent_name.md")
    set child_names (awk '/^child:/ {flag=1; next} flag && /^  - / {print $0} flag && !/^  - / {flag=0}' $parent_file | sed 's/[][]//g; s/"//g; s/-//g; s/^[[:space:]]*//; s/[[:space:]]*$//')
    for i in $child_names
        set child_file (find $obsidian_folder/$notes/* -type f -iname "$i.md")
        set filtered_pool $filtered_pool $child_file
    end
    set filtered_pool (for i in $filtered_pool; echo $i; end | sort -u)
end

if set -q _flag_e
    set network_names (rg "^\[\[" $obsidian_file | sed 's/[][]//g')
    for i in $network_names
        set network_file (find $obsidian_folder/$notes/* -type f -iname "$i.md")
        set filtered_pool $filtered_pool $network_file
    end
end

if set -q _flag_r
    if test -z $argv[1]
        echo true
        set depth 3
    else
        echo false
        set depth $argv[1]
    end
    set loop_count 1
    if test $depth -gt 0
        set network_names (rg "^\[\[" $obsidian_file | sed 's/[][]//g')
    end
    while test $loop_count -lt $depth
        set array_count (count $network_names)
        for i in $network_names
            set network_file (find $obsidian_folder/$notes/* -type f -name "$i.md")
            if rg "^\[\[" $network_file
                set network_names $network_names (rg "^\[\[" $network_file | sed 's/[][]//g' | sort -u)
            end
            set network_names (for na in $network_names; echo $na; end | sort -u)
        end
        if test (count $network_names) -eq $array_count
            break
        end
        set loop_count (math $loop_count + 1)
    end
    for i in $network_names
        set network_file (find $obsidian_folder/$notes/* -type f -iname "$i.md")
        set filtered_pool $filtered_pool $network_file
    end
end

if set -q _flag_t
    set chosen_tag (awk '/^tags:/ {flag=1; next} flag && /^  - / {print $2} flag && !/^  - / {flag=0}' $default_pool_array | sort -u | fzf)
    set filtered_pool (rg -l "^  - $chosen_tag\$" $obsidian_folder/$notes)
end

if set -q _flag_d
    set chosen_tag (awk '/^tags:/ {flag=1; next} flag && /^  - / {print $2} flag && !/^  - / {flag=0}' $default_pool_array | sort -u | fzf)
    set filtered_pool (rg -l "^  - $chosen_tag\$" $default_pool_array)
    set chosen_tag (rg -o --no-filename "^  - [a-z]*" $filtered_pool | sed 's/[ -]//g' | sort -u | fzf)
    set filtered_pool (rg -l "^  - $chosen_tag\$" $default_pool_array)
end

if set -q _flag_g
    set group_name (rg -oP --no-filename "(?<=group: ).*" $default_pool_array | sort -u | fzf)
    set filtered_pool (rg -lF "group: $group_name")
end

if set -q _flag_k
    while test -z $keyword
        set keyword (gum input --placeholder "Input Keyword")
    end
    while test -z $keyword_choice[1]
        set keyword_choice (gum choose --no-limit "File-Name" "File-Content")
    end
    set -e filtered_pool
    for i in $keyword_choice
        if string match File-Name $i
            set filtered_pool $filtered_pool (find $default_pool_array -type f -iname "*$keyword*")
        else if string match File-Content $i
            set filtered_pool $filtered_pool (rg -lF "$keyword" $default_pool_array)
        end
    end
    set filtered_pool (for i in $filtered_pool; echo $i; end | sort -u)
end

### Filters start here 
if set -q _flag_m
    set subtag_pool (rg -P "^(Q|I|D|W):.*#.*" $default_pool_array | rg -oP "#[^ ]*" | sed s/#//g | sort -u | gum choose --no-limit)
    if test -z $subtag_pool[2]
        set regex_ready_subtags "$subtag_pool"
    else
        set regex_ready_subtags (echo $subtag_pool | sed 's/ /|/g')
        set regex_ready_subtags "($regex_ready_subtags)"
    end
    set question_array (rg --no-filename --no-line-number "^(Q|I|D|W):.*#$regex_ready_subtags" $default_pool_array)
end

if set -q _flag_f
    set filter_word (gum input --placeholder "Filter based on file name, example: filter_word1|filter_word2")
    for i in $filtered_pool
        if not string match "" $filter_word
            if echo $i | rg --ignore-case "$filter_word"
            else
                set new_filtered_pool $new_filtered_pool $i
            end
        else
            break
        end
        set filtered_pool $new_filtered_pool
    end
end

if test -z $filtered_pool[1]
    set filtered_pool $default_pool_array
end

if test -z $question_array[1]
    echo "some random shit"
    set count_q (rg "Q:" $filtered_pool | count)
    set count_i (rg "I:" $filtered_pool | count)
    set count_w (rg "W:" $filtered_pool | count)
    set count_d (rg "D:" $filtered_pool | count)
    set count_c (rg "(Q|I|W|D):" $filtered_pool | count)
else
    set count_q (echo $question_array | rg -o "Q:" | wc -l)
    set count_i (echo $question_array | rg -o "I:" | wc -l)
    set count_w (echo $question_array | rg -o "W:" | wc -l)
    set count_d (echo $question_array | rg -o "D:" | wc -l)
    set count_c (echo $question_array | rg -o "(Q|I|W|D):" | wc -l)
end

set choice (gum choose --limit 1 "Question ($count_q)" "Inspiration ($count_i)" "Wiki ($count_w)" "Drill ($count_d)" "Combined ($count_c)"| string split " ")[1]
if string match Question $choice
    set selection Q
else if string match Inspiration $choice
    set selection I
else if string match Wiki $choice
    set selection W
else if string match Drill $choice
    set selection D
else if string match Combined $choice
    set selection "(Q|I|W|D)"
end

if test -z $question_array[1]
    set question_array (rg --no-filename --no-line-number "^$selection:" $filtered_pool)
end

for i in $question_array
    if echo $i | rg -q "....-..-.. ..:..:.."
        set raw_date (echo "$i" | rg -o "....-..-.. ..:..:..")
        if echo $i | rg "(?<=S-Value: )[-0-9]*"
            set raw_value (echo $i | rg -oP "(?<=S-Value: )[-0-9]*")
        else
            set raw_value 0
        end
        set unix_timestamp (date -d "$raw_date" +%s)
        set value_seconds (ot_config_grab "ValueSeconds")
        set final_second_value (math $raw_value x $value_seconds)
        set unix_result (math $unix_timestamp + $final_second_value)
    else
        set unix_result 0
    end
    set unix_array $unix_array "$unix_result $i"
end

set sorted_unix_array (for i in $unix_array
    echo $i 
end | sort -n)

for i in $sorted_unix_array
    set final_sorted_array $final_sorted_array (echo "$i" | rg -o "(Q|I|W|D).*")
end

clear
for i in $final_sorted_array
    set card_type (echo "$i" | grep -o "^.")

    if string match -q Q $card_type
        echo "$i" | glow
        gum input --placeholder "Press enter to continue..."
    end

    set i_trim (string trim -r -- $i)
    set trimmed (string split '`' -- $i_trim)[1]
    set target_md (rg -lF "$trimmed" $obsidian_folder/$notes)

    if string match -q Combined $choice
    else
        if string match -q W $card_type
            set wiki_choice (for w in $question_array; echo $w; end | fzf -0 --preview "rg --no-filename -A 10 {} $obsidian_folder/$notes | glow")
            set target_md (rg -lF "$wiki_choice" $obsidian_folder/$notes)
            set trimmed (string split '`' -- $wiki_choice)[1]
        end
    end

    if string match -q I $card_type
        if test -z $second_counter
            set second_counter (gum input --placeholder "Select a minimum amount of time in seconds to observe inspiration")
        end
    end

    if string match -q D $card_type
        while not string match y $user_decision
            mkdir -p $obsidian_folder/$obsidian_resource/drill_evidence
            set input_user (gum input --placeholder "Press Enter when you are ready to provide Image Evidence of your drill, insert x if you don't want to provide evidence")
            if string match -q x $input_user
                break
            end
            set image_evidence (gum file $HOME)
            set suffix_evidence (echo $image_evidence | rg -o '[^.\\\\/:*?"<>|\\r\\n]+$')
            icat_half $image_evidence "$suffix_evidence"
            set user_decision (gum input --placeholder "Are you sure about this evidence? y/n")
            if string match y $user_decision
                cp $target_md /tmp/clone.md
                set uuid (uuidgen)
                cp $image_evidence $obsidian_folder/$obsidian_resource/drill_evidence/$uuid.$suffix_evidence
                set image_final_insert "![[$uuid.$suffix_evidence]]"
                awk -v search="$trimmed" -v newline="$image_final_insert" '
              !in_para && index($0, search) { found = 1 }
              NF > 0 { in_para = 1 }  # paragraph is active (non-empty line)
              NF == 0 && found && !inserted {
                print newline
                inserted = 1
              }
              { print }
              NF == 0 { in_para = 0 }  # reset at blank line
              ' /tmp/clone.md >$target_md
            end
        end
        clear
        rm /tmp/clone.md
    end
    if not test -z $pid
        kill $pid
        set -e pid
    end
    echo "Source: $target_md"
    awk -v search="$trimmed" '
      index($0, search) {flag=1}
      flag {print}
      /^$/ && flag {flag=0}
                              ' $target_md | tee /tmp/img_treasure | glow
    set img_array (cat /tmp/img_treasure | grep -oP "(?<=!\[\[)[^\]]*")
    for img in $img_array
        set suffix (echo $img | rg -o '[^.\\\\/:*?"<>|\\r\\n]+$')
        set img_path (find $obsidian_folder/$obsidian_resource -type f -name "$img")
        if echo $img_path | rg mp3
        else
            icat_half $img_path "$suffix"
        end
    end
    if cat /tmp/img_treasure | grep -oP "(?<=!\[\[).*.mp3"
        set mp3 (cat /tmp/img_treasure | grep -oP "(?<=!\[\[).*.mp3" | perl -pe 's/([\[\]])/\\\\$1/g')
        set mp3path (find $obsidian_folder/$obsidian_resource -type f -name "$mp3")
        mpv --no-video "$mp3path" >/dev/null &
        set pid $last_pid
    end

    if string match -q I $card_type
        gum spin --spinner moon --title "Get inspired..." -- sleep $second_counter
    end

    echo ""
    if not echo $i | rg -qP '`'
        if string match -q W $card_type
            set user_input (gum input --placeholder "0 - Exit | r - Revise | o - Open File")
            if string match 1 $user_input; or string match 2 $user_input
                set user_input ""
            end
        else if string match -q I $card_type
            set user_input (gum input --placeholder "d - Date | 0 - Exit | r - Revise | o - Open File")
            if string match 1 $user_input; or string match 2 $user_input
                set user_input ""
            end
        else
            set user_input (gum input --placeholder "1 - Correct | 2 - Wrong | 0 - Exit | r - Revise | o - Open File")
        end
        set new_date (date +"%Y-%m-%d %H:%M:%S")

        if string match 0 $user_input
            exit
        else if string match r $user_input
            clear
            sed -i "s/$i/ - [?] $i_trim/g" $target_md
        else if string match 1 $user_input
            clear
            sed -i "s/$i/$i_trim `$new_date S-Value: 1`/g" $target_md
        else if string match 2 $user_input
            clear
            sed -i "s/$i/$i_trim `$new_date S-Value: -1`/g" $target_md
        else if string match o $user_input
            clear
            obsidian "obsidian://$target_md" >/dev/null 2>&1 &
        else if string match d $user_input
            clear
            sed -i "s/$i/$i_trim `$new_date`/g" $target_md
        end
    else
        if string match -q I $card_type
            set user_input (gum input --placeholder "d - Date | 0 - Exit | r - Revise | o - Open File")
            if string match 1 $user_input; or string match 2 $user_input
                set user_input ""
            end
        else
            set user_input (gum input --placeholder "1 - Correct | 2 - Wrong | 0 - Exit | r - Revise | o - Open File")
            if string match d $user_input
                set user_input ""
            end
        end
        set old_date (echo $i | rg -o "`.*:[0-9]+" | sed 's/`//g')
        set new_date (date +"%Y-%m-%d %H:%M:%S")
        set svalue (echo $i | rg -oP "(?<=S-Value: )[-0-9]*")

        if string match 0 $user_input
            exit
        else if string match r $user_input
            clear
            sed -i "s/$i/ - [?] $i/g" $target_md
            sed -i "s/$old_date/$new_date/g" $target_md
        else if string match 1 $user_input
            clear
            set svalue (math $svalue + 1)
            set new_i (echo $i | string replace -r 'S-Value: -?\d+' "S-Value: $svalue" -- $line)
            sed -i "s/$i/$new_i/g" $target_md
            sed -i "s/$old_date/$new_date/g" $target_md
        else if string match 2 $user_input
            clear
            set svalue (math $svalue - 1)
            set new_i (echo $i | string replace -r 'S-Value: -?\d+' "S-Value: $svalue" -- $line)
            sed -i "s/$i/$new_i/g" $target_md
            sed -i "s/$old_date/$new_date/g" $target_md
        else if string match o $user_input
            clear
            obsidian "obsidian://$target_md" >/dev/null 2>&1 &
        else if string match d $user_input
            clear
            sed -i "s/$old_date/$new_date/g" $target_md
        else if string match 2 $user_input
        end
    end

    set -e target_md
end

if not test -z $pid
    kill $pid
    set -e pid
end
rm /tmp/img_treasure
