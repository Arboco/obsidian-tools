#! /usr/bin/env fish

function help_function
    echo "By default selection from all pool files."
    echo "Options:"
    echo "  -h       help"
    echo "  -p       Include Q&I from the parent"
    echo "  -t       All Q&I from a particular tag"
    echo "  -d       All Q&I from two combined tags"
end

function icat_half
    set image $argv[1]

    if not test -f "$image"
        echo "Error: File not found: $image"
        return 1
    end

    set rows (tput lines)
    set row_height_px 18
    set max_height (math "$rows * $row_height_px / 2")

    set tmpimg (mktemp --suffix=.png)
    magick "$image" -resize x$max_height\> "$tmpimg"

    kitty +kitten icat "$tmpimg"
    sleep 0.3
    rm $tmpimg
end

argparse --name=pool t/tag d/double i/history r/random u/unrated b/bookmark o/origin p/parent h/help 'n/name=' -- $argv
or return

set script_dir (realpath (status dirname))
set obsidian_folder (ot_config_grab "ObsidianMainFolder")
set obsidian_resource (ot_config_grab "ObsidianResourceFolder")
set notes (ot_config_grab "NotesFolder")
set obsidian_file (cat /tmp/obsidian_last.txt)
set filtered_pool $obsidian_file

set default_pool_array (rg -l "^  - pool\$" $obsidian_folder/$notes)
set multi_flag_check 1

if set -q _flag_h
    help_function
    exit
end

if set -q _flag_p
    set parent_name (rg -oP "(?<=parent: \"\[\[)[^\]]*" $obsidian_file)
    set parent_file (find $obsidian_folder/$notes/* -type f -iname "$parent_name.md")
    set filtered_pool $filtered_pool $parent_file
end

if set -q _flag_t
    set chosen_tag (awk '/^tags:/ {flag=1; next} flag && /^  - / {print $2} flag && !/^  - / {flag=0}' $default_pool_array | sort -u | fzf)
    set filtered_pool (rg -l "^  - $chosen_tag\$" $obsidian_folder/$notes)
end

if set -q _flag_d
    set chosen_tag (awk '/^tags:/ {flag=1; next} flag && /^  - / {print $2} flag && !/^  - / {flag=0}' $default_pool_array | sort -u | fzf)
    set filtered_pool (rg -l "^  - $chosen_tag\$" $default_pool_array)
    set chosen_tag (rg -o --no-filename "^  - [a-z]*" $filtered_pool | sed 's/[ -]//g' | sort -u | fzf)
    set filtered_pool (rg -l "^  - $chosen_tag\$" $default_pool_array)
end

set count_q (rg "Q:" $filtered_pool | count)
set count_i (rg "I:" $filtered_pool | count)
set choice (gum choose --limit 1 "Question ($count_q)" "Inspiration ($count_i)" | string split " ")[1]
if string match Question $choice
    set selection Q
else if string match Inspiration $choice
    set selection I
end

set question_array (rg --no-filename --no-line-number "^$selection:" $filtered_pool | awk '
{
  match($0, /`([^`]*)`/, arr)
  if (arr[1] != "") {
    cmd = "date -d \"" arr[1] "\" +%s"
    cmd | getline ts
    close(cmd)
    print ts "\t" $0
  } else {
    print "0\t" $0
  }
}
' | sort -n | cut -f2-)

clear

for i in $question_array

    if string match -q Question $choice 2>&1
        echo "$i" | glow
    end
    set i_trim (string trim -r -- $i)
    set trimmed (string split '`' -- $i_trim)[1]
    set target_md (rg -lF "$trimmed" $obsidian_folder/$notes)

    if string match -q Question $choice
        gum input --placeholder "Press Enter to continue..."
        clear
    end
    echo "Source: $target_md"
    awk -v search="$trimmed" '
      index($0, search) {flag=1}
      flag {print}
      /^$/ && flag {flag=0}
                              ' $target_md | tee /tmp/img_treasure | glow
    set img_array (cat /tmp/img_treasure | grep -oP "(?<=!\[\[)[^\]]*")
    for img in $img_array
        echo $img
        set img_path (find $obsidian_folder/$obsidian_resource -type f -name "$img")
        icat_half $img_path
    end

    echo ""
    if not echo $i | rg -qP '`'

        set user_input (gum input --placeholder "1 - Pass | 2 - Ignore | 0 - Exit | s - Star | r - Revise | o - Open File")
        set new_date (date +"%Y-%m-%d %H:%M:%S")

        if string match 0 $user_input
            exit
        else if string match s $user_input
            clear
            sed -i "s/$i/$i_trim `$new_date` ⭐/g" $target_md
        else if string match r $user_input
            clear
            sed -i "s/$i/ - [?] $i_trim/g" $target_md
        else if string match 1 $user_input
            clear
            sed -i "s/$i/$i_trim `$new_date`/g" $target_md
        else if string match 2 $user_input
            clear
        else if string match o $user_input
            clear
            obsidian "obsidian://$target_md" >/dev/null 2>&1 &
        end
    else
        set user_input (gum input --placeholder "1 - Pass | 2 - Ignore | 0 - Exit | s - Star | r - Revise | o - Open File")
        set old_date (echo $i | grep -o "`.*`")
        set new_date (date +"%Y-%m-%d %H:%M:%S")
        if string match 0 $user_input
            exit
        else if string match s $user_input
            clear
            sed -i "s/$i/& ⭐/" $target_md
            sed -i "s/$old_date/`$new_date`/g" $target_md
        else if string match r $user_input
            clear
            sed -i "s/$i/ - [?] $i/g" $target_md
            sed -i "s/$old_date/`$new_date`/g" $target_md
        else if string match 1 $user_input
            clear
            sed -i "s/$old_date/`$new_date`/g" $target_md
        else if string match 2 $user_input
            clear
        else if string match o $user_input
            clear
            obsidian "obsidian://$target_md" >/dev/null 2>&1 &
        end
    end

    set -e target_md
end

rm /tmp/img_treasure
