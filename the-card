#! /usr/bin/env fish

function help_function
    echo "Options: flags can be mostly combined where it makes logical sense"
    echo "  default  Card pool comes from current the-pool target or if not available generic selection"
    echo "  -o       override file used for default option so you can skip using the-pool directly"
    echo "  -p       Include card pool from the parent of the-pool target"
    echo "  -b       Include card pool from brothers (other children of your parent)"
    echo "  -c       Includes children of target in card-pool"
    echo "  -f       Include entire direct family, shorthand for using -pbc"
    echo "  -e       Include card pool from every file you link to from the-pool target"
    echo "  -r       Searches links recursively (link inside link inside link...) and adds all it finds to card pool"
    echo "           Default is a depth of 3 but depth can be customized with second argument"
    echo "  -t       Include card pool from a particular tag from pool files"
    echo "  -m        Include subtags in the pool"
    echo "  -d       The card pool from two combined tags from pool files"
    echo "  -g       Use group property to put all files from a group into card pool"
    echo "  -k       Search trough files with keyword"

    echo ""
    echo "Filters: Apply these in combination with the above to get the exact card-pool you want"
    echo "  -s       Filter your pool based on subtags inside your card headers"
    echo "  -a       Filter based on filename"
    echo "  -l       Filter based on tags"
end

argparse --name=pool t/tag d/double s/subtag b/brother c/child f/family e/every p/parent r/recursive o/override g/group k/keyword a/an l/losetag m/multi h/help 'n/name=' -- $argv
or return

set script_dir (realpath (status dirname))
set obsidian_folder (ot_config_grab "ObsidianMainFolder")
set obsidian_resource (ot_config_grab "ObsidianResourceFolder")
set notes (ot_config_grab "NotesFolder")
set default_pool_array (rg -l "^(I|Q|W|T):" $obsidian_folder/$notes)

if test -f /tmp/obsidian_last.txt
    set obsidian_file (cat /tmp/obsidian_last.txt)
    set filtered_pool $obsidian_file
end

if set -q _flag_h
    help_function
    exit
end

if set -q _flag_f
    set _flag_p 1
    set _flag_b 1
    set _flag_c 1
end

if set -q _flag_o
    set obsidian_file (rg -l "^(I|Q|W|T):" $obsidian_folder/$notes | fzf -0 --delimiter='/' --with-nth=-1 --preview 'glow {}')
    set filtered_pool $obsidian_file
end

if set -q _flag_p
    set parent_name (rg -oP "(?<=parent: \"\[\[)[^\]]*" $obsidian_file)
    set parent_file (find $obsidian_folder/$notes/* -type f -iname "$parent_name.md")
    set filtered_pool $filtered_pool $parent_file
end

if set -q _flag_b
    set parent_name (rg -oP "(?<=parent: \"\[\[)[^\]]*" $obsidian_file)
    set parent_file (find $obsidian_folder/$notes/* -type f -iname "$parent_name.md")
    set child_names (awk '/^child:/ {flag=1; next} flag && /^  - / {print $0} flag && !/^  - / {flag=0}' $parent_file | sed 's/[][]//g; s/"//g; s/-//g; s/^[[:space:]]*//; s/[[:space:]]*$//')
    for i in $child_names
        set child_file (find $obsidian_folder/$notes/* -type f -iname "$i.md")
        set filtered_pool $filtered_pool $child_file
    end
    set filtered_pool (for i in $filtered_pool; echo $i; end | sort -u)
end

if set -q _flag_c
    set child_names (awk '/^child:/ {flag=1; next} flag && /^  - / {print $0} flag && !/^  - / {flag=0}' $obsidian_file | sed 's/[][]//g; s/"//g; s/-//g; s/^[[:space:]]*//; s/[[:space:]]*$//')
    for i in $child_names
        set child_file (find $obsidian_folder/$notes/* -type f -iname "$i.md")
        set filtered_pool $filtered_pool $child_file
    end
    set filtered_pool (for i in $filtered_pool; echo $i; end | sort -u)
end

if set -q _flag_e
    set network_names (rg "^\[\[" $obsidian_file | sed 's/[][]//g')
    for i in $network_names
        set network_file (find $obsidian_folder/$notes/* -type f -iname "$i.md")
        set filtered_pool $filtered_pool $network_file
    end
end

if set -q _flag_r
    if test -z $argv[1]
        echo true
        set depth 3
    else
        echo false
        set depth $argv[1]
    end
    set loop_count 1
    if test $depth -gt 0
        set network_names (rg "^\[\[" $obsidian_file | sed 's/[][]//g')
    end
    while test $loop_count -lt $depth
        set array_count (count $network_names)
        for i in $network_names
            set network_file (find $obsidian_folder/$notes/* -type f -name "$i.md")
            if rg "^\[\[" $network_file
                set network_names $network_names (rg "^\[\[" $network_file | sed 's/[][]//g' | sort -u)
            end
            set network_names (for na in $network_names; echo $na; end | sort -u)
        end
        if test (count $network_names) -eq $array_count
            break
        end
        set loop_count (math $loop_count + 1)
    end
    for i in $network_names
        set network_file (find $obsidian_folder/$notes/* -type f -iname "$i.md")
        set filtered_pool $filtered_pool $network_file
    end
end

if set -q _flag_t
    set chosen_tag (awk '/^tags:/ {flag=1; next} flag && /^  - / {print $2} flag && !/^  - / {flag=0}' $default_pool_array | sort -u | fzf)
    set filtered_pool (rg -l "^  - $chosen_tag\$" $default_pool_array)
end

if set -q _flag_d
    set chosen_tag (awk '/^tags:/ {flag=1; next} flag && /^  - / {print $2} flag && !/^  - / {flag=0}' $default_pool_array | sort -u | fzf)
    set filtered_pool (rg -l "^  - $chosen_tag\$" $default_pool_array)
    set chosen_tag (rg -o --no-filename "^  - [a-z]*" $filtered_pool | sed 's/[ -]//g' | sort -u | fzf)
    set filtered_pool (rg -l "^  - $chosen_tag\$" $default_pool_array)
end

if set -q _flag_g
    set group_name (rg -oP --no-filename "(?<=group: ).*" $default_pool_array | sort -u | fzf)
    set filtered_pool (rg -lF "group: $group_name")
end

if set -q _flag_k
    while test -z $keyword
        set keyword (gum input --placeholder "Input Keyword")
    end
    while test -z $keyword_choice[1]
        set keyword_choice (gum choose --no-limit "File-Name" "File-Content")
    end
    set -e filtered_pool
    for i in $keyword_choice
        if string match File-Name $i
            set filtered_pool $filtered_pool (find $default_pool_array -type f -iname "*$keyword*")
        else if string match File-Content $i
            set filtered_pool $filtered_pool (rg -lF "$keyword" $default_pool_array)
        end
    end
    set filtered_pool (for i in $filtered_pool; echo $i; end | sort -u)
end

if set -q _flag_m
    if test -z $filtered_pool[1]
        set filtered_pool empty
    end
    set subtag_pool (rg -P "^(Q|I|T|W):.*#.*" $obsidian_folder/$notes | rg -oP "#[^ ]*" | sed s/#//g | sort -u | fzf -m)
    if test -z $subtag_pool[2]
        set regex_ready_subtags "$subtag_pool"
    else
        set regex_ready_subtags (echo $subtag_pool | sed 's/ /|/g')
        set regex_ready_subtags "($regex_ready_subtags)"
    end
    set question_array (rg --no-filename --no-line-number "^(Q|I|T|W):.*#$regex_ready_subtags" $obsidian_folder/$notes)
    set question_array $question_array (rg --no-filename --no-line-number "^(Q|I|W|T):" $filtered_pool)
end

### Filters start here 
if set -q _flag_s
    set subtag_pool (rg -P "^(Q|I|T|W):.*#.*" $filtered_pool | rg -oP "#[^ ]*" | sed s/#//g | sort -u | fzf -m)
    if test -z $subtag_pool[2]
        set regex_ready_subtags "$subtag_pool"
    else
        set regex_ready_subtags (echo $subtag_pool | sed 's/ /|/g')
        set regex_ready_subtags "($regex_ready_subtags)"
    end
    set question_array (rg --no-filename --no-line-number "^(Q|I|T|W):.*#$regex_ready_subtags" $filtered_pool)
end

if set -q _flag_a
    set filter_word (gum input --placeholder "Filter based on file name, example: filter_word1|filter_word2")
    for i in $filtered_pool
        if not string match "" $filter_word
            if echo $i | rg --ignore-case "$filter_word"
            else
                set new_filtered_pool $new_filtered_pool $i
            end
        else
            break
        end
        set filtered_pool $new_filtered_pool
    end
end

if set -q _flag_l
    set negative_tags (awk '/^tags:/ {flag=1; next} flag && /^  - / {print $2} flag && !/^  - / {flag=0}' $filtered_pool | sort -u | gum choose --no-limit)

    if test -z $negative_tags[2]
        set regex_ready_negative_tags "$negative_tags"
    else
        set regex_ready_negative_tags (echo $negative_tags | sed 's/ /|/g')
        set regex_ready_negative_tags "($regex_ready_negative_tags)"
    end
    for i in $filtered_pool
        if rg "  - $regex_ready_negative_tags" $i
        else
            set filtered_tags_pool $filtered_tags_pool $i
        end
    end

    set filtered_pool $filtered_tags_pool
end

if test -z $filtered_pool[1]
    set filtered_pool $default_pool_array
end

if test -z $question_array[1]
    set count_q (rg "Q:" $filtered_pool | count)
    set count_i (rg "I:" $filtered_pool | count)
    set count_w (rg "W:" $filtered_pool | count)
    set count_t (rg "T:" $filtered_pool | count)
    set count_c (rg "(Q|I|W|T):" $filtered_pool | count)
else
    set count_q (echo $question_array | rg -o "Q:" | wc -l)
    set count_i (echo $question_array | rg -o "I:" | wc -l)
    set count_w (echo $question_array | rg -o "W:" | wc -l)
    set count_t (echo $question_array | rg -o "T:" | wc -l)
    set count_c (echo $question_array | rg -o "(Q|I|W|T):" | wc -l)
end

set choice (gum choose --limit 1 "Combined ($count_c)" "Question ($count_q)" "Inspiration ($count_i)" "Wiki ($count_w)" "Task ($count_t)"| string split " ")[1]
if string match -q Question $choice
    set selection Q
else if string match -q Inspiration $choice
    set selection I
else if string match -q Wiki $choice
    set selection W
else if string match -q Task $choice
    set selection T
else if string match -q Combined $choice
    set selection "(Q|I|W|T)"
end

if test -z $question_array[1]
    set question_array (rg --no-filename --no-line-number "^$selection:" $filtered_pool)
end

# Sorting Algorithm
for i in $question_array
    if echo $i | rg -q "....-..-.. ..:..:.."
        set raw_date (echo "$i" | rg -o "....-..-.. ..:..:..")
        if echo $i | rg -P "(?<=S-Value: )[-0-9]*"
            set raw_value (echo $i | rg -oP "(?<=S-Value: )[-0-9]*")
        else
            set raw_value 0
        end
        set unix_timestamp (date -d "$raw_date" +%s)
        set value_seconds (ot_config_grab "ValueSeconds")
        set final_second_value (math $raw_value x $value_seconds)
        set unix_result (math $unix_timestamp + $final_second_value)
    else
        set unix_result 0
    end
    set unix_array $unix_array "$unix_result $i"
end

set sorted_unix_array (for i in $unix_array
    echo $i 
end | sort -n)

for i in $sorted_unix_array
    set final_sorted_array $final_sorted_array (echo "$i" | rg -o "(Q|I|W|T).*")
end

rm /tmp/the-card_final_sorted_array
for i in $final_sorted_array
    echo $i >>/tmp/the-card_final_sorted_array
end

clear
source $script_dir/scripts/the-card-output.fish
