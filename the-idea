#! /usr/bin/env fish

function help_function
    echo "By default selection from all pool files."

    echo "Options:"
    echo "  -h       help"
    echo "  -t       Filter selection based on a tag"
    echo "  -d       Filter selection based on two tags"
    echo "  -i       History, selection decending from the most recent file"
    echo "  -r       Random selection. Works with -t and -d"
    echo "  -u       Select unrated files. Works with -t, -d and/or -r"
    echo "  -b       100 Value (bookmarked)"
    echo "  -o       Filter selection based on origin"
    echo "  -p       Filter selection based on parent"
end

argparse --name=pool t/tag d/double i/history r/random u/unrated b/bookmark o/origin p/parent h/help 'n/name=' -- $argv
or return

set script_dir (realpath (status dirname))
set obsidian_folder (ot_config_grab "ObsidianMainFolder")
set notes (ot_config_grab "NotesFolder")
set default_pool_array (rg -l "^  - pool\$" $obsidian_folder)
set multi_flag_check 1

if set -q _flag_h
    help_function
    exit
end

set config_path $HOME/.config/ortscripts/the-question.json
set protocol (jq '.[]' $config_path | jq '.protocol' | fzf)
echo "$protocol"
set folder (jq -r ".[] | select(.protocol == $protocol) | .folder" $config_path)
echo "$folder"
#set tags (jq -r '.[].tags[]' $config_path)
#set properties (jq -r '.[].properties[]' $config_path)
set tags (jq -r ".[] | select(.protocol == $protocol) | .tags[]" $config_path)
set properties (jq -r ".[] | select(.protocol == $protocol) | .properties[]" $config_path)

set title (gum input --placeholder "Title")
set final_path "$obsidian_folder/$notes/$folder/$title.md"

echo --- >>$final_path
echo "tags:" >>$final_path
for i in $tags
    echo "  - $i" >>$final_path
end

for i in $properties
    echo "$i:" >>$final_path
    set check
    while not string match 0 $check
        set check (gum input --placeholder $i)
        if not string match 0 $check
            echo "  - $check" >>$final_path
        end
    end
end

if jq ".[] | select(.protocol == $protocol)" $config_path | jq 'has("number")'
    set number_property (jq -r ".[] | select(.protocol == $protocol) | .number" $config_path)
    echo "$number_property: $(gum input --placeholder $number_property)" >>$final_path
end
echo --- >>$final_path
echo "" >>$final_path
echo "# Core" >>$final_path
echo $(gum input --placeholder "Core Text") >>$final_path
echo "" >>$final_path

set check 1
while not string match 0 $check
    set check (gum input --placeholder "Brainstorming")
    if not string match 0 $check
        if grep -q "# Brainstorming" $final_path
        else
            echo "# Brainstorming" >>$final_path
        end
        echo "- $check" >>$final_path
    end
end
